Object-oriented programming is an approach to software development in which the structure of the software
is based on objects interacting with each other to accomplish a task. This interaction takes the form of
messages passing back and forth between the objects. In response to a message, an object can perform an action.
If you look at how you accomplish tasks in the world around you, you can see that you interact in an object-oriented
world. If you want to go to the store, for example, you interact with a car object. A car object consists of
other objects that interact with each other to accomplish the task of getting you to the store. You put the key
object in the ignition object and turn it. This in turn		 sends a message (through an electrical signal) to the
starter object, which interacts with the engine object to start the car. As a driver, you are isolated from the
logic of how the objects of the system work together to start the car. You just initiate the sequence of events
by executing the start method of the ignition object with the key. You then wait for a response (message) of success
or failure.
Similarly, users of software programs are isolated from the logic needed to accomplish a task. For example, when you
print a page in your word processor, you initiate the action by clicking a print button. You are isolated from the
internal processing that needs          to occur; you just wait for a response telling you if it printed. In the software program,
the button object interacts with a printer object, which interacts with the actual printer to accomplish the task of
printing the page.
OOP concepts started surfacing in the mid-1960s with a programming language called Simula and further evolved 
in the 1970s with advent of Smalltalk. Although software developers did not overwhelmingly embrace these early advances
in OOP languages, object-oriented methodologies continued to evolve. In the mid-1980s there was a resurgence of interest
in object-oriented methodologies. Specifically, OOP languages such as C++ and Eiffel became popular with mainstream
computer programmers. OOP continued to grow in popularity in the 1990s, most notably with the advent of Java and the huge
following it attracted. And in 2002, in conjunction with the release       of the .NET Framework, Microsoft introduced a new
OOP language, C# (pronounced C-sharp) and revamped their widely popular existing language, Visual Basic, so that it is
now truly object-oriented. Today OOP languages continue to flourish and are a mainstay of modern programming.
Why has OOP developed into such a widely used paradigm for solving business problems today? During the 1970s and 1980s,
procedure-oriented programming languages such as C, Pascal, and Fortran were widely used to develop business-oriented
software systems. Procedural languages organize the program in a linear fashion - they run from top to bottom. In other
words, the program is a series of 			steps that run one after another. This type of programming worked fine for small programs
that consisted of a few hundred code lines, but as programs became larger they became hard to manage and debug.
In an attempt to manage the ever-increasing size of the programs, structured programming was introduced to break down
the code into manageable segments called functions or procedures. This was an improvement, but as programs performed
more complex business functionality and interacted with other systems, the following shortcomings of structural programming
began to surface.

